// https://pest.rs/book/grammars/peg.html
// https://pest.rs/book/grammars/syntax.html

program = {SOI ~ (var_declaration | func_declaration)* ~ EOI}

var_declaration = {(type_spec ~ id ~ "[" ~ int_literal ~ "]" ~ ";") | (type_spec ~ id ~ ";")} 

func_declaration = {type_spec ~ id ~ params ~ compound_stmt}
    params = {"(" ~ param? ~ ("," ~ param)*  ~ ")"}
    param = {type_spec ~ id}

compound_stmt = {"{" ~ (var_declaration *) ~ (statement *) ~ "}"}        
statement = {expression_stmt | selection_stmt | iteration_stmt | return_stmt | compound_stmt}
    expression_stmt = {(expression ~ ";") | ";"}
    selection_stmt = {("if" ~ "(" ~ expression ~ ")" ~ statement ~ "else" ~ statement) | ("if" ~ "(" ~ expression ~ ")" ~ statement)}
    iteration_stmt = {"while" ~ "(" ~ expression ~ ")" ~ statement}
    return_stmt = {("return" ~ expression ~ ";") | ("return" ~ ";")}
        
expression = {assignment_expression | equlity_expression}

assignment_expression = {var ~ assign_simple ~ expression}
unary_expression = {var | int_literal | call_expression | bracket_expression}
multiplicative_expression = {unary_expression ~ ((op_mul | op_div) ~ unary_expression)*}
additive_expression = { multiplicative_expression ~ ((op_add | op_sub) ~ multiplicative_expression)*}
cmp_expression = {additive_expression ~ ((op_ge | op_le | op_gt | op_lt)  ~ additive_expression)*}
equlity_expression = {cmp_expression ~ ((op_eq | op_ne) ~ cmp_expression)*}

var = {(id ~ "[" ~ expression ~ "]") | id}
bracket_expression = {"(" ~ expression ~")"}
call_expression = {id ~ "(" ~ args ~ ")"}
args = {expression? ~("," ~ expression)*}
id = @{(ASCII_ALPHA | "_") ~ (ASCII_ALPHA | "_" | ASCII_DIGIT)*}

// tokens
// type token
type_spec = {int | void}
int = {"int"}
void = {"void"}
// operation token
op_ge = {">="}
op_le = {"<="}
op_gt = {">"}
op_lt = {"<"}
op_eq = {"=="}
op_ne = {"!="}
op_add = {"+"}
op_sub = {"-"}
op_mul = {"*"}
op_div = {"/"}
assign_simple = { "=" }
// literal
int_literal = { bin_literal | hex_literal | oct_literal | dec_literal }
dec_literal = @{ "0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* }
bin_literal = @{ ^"0b" ~ ASCII_BIN_DIGIT+ }
oct_literal = @{ ^"0o" ~ ASCII_OCT_DIGIT+ }
hex_literal = @{ ^"0x" ~ ASCII_HEX_DIGIT+ }
// keyword
keyword = {
    "char" |
    "bool" |
    "true" |
    "false" |
    "char" |
    "short" |
    "double" |
    "float" |
    "long" |
    "unsigned" |
    "int" |
    "void" |
    "return" |
    "break" |
    "if" |
    "else" |
    "continue" |
    "while" |
    "for" |
    "do"
}

WHITESPACE = _{ " " | "\n" | "\r" }
COMMENT = _{
    ("/*" ~ (!"*/" ~ ANY)* ~ "*/") // Block comment
    | ("//" ~ (!"\n" ~ ANY)* ~ ("\n" | EOI)) // Line comment
}

